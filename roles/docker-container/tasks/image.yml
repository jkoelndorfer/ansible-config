---

- name: map container image state | {{ container_name }}
  set_fact:
    container_state: "{{ {'started': 'present', 'stopped': 'present'}.get(state, state) }}"

- name: create container build directory
  tempfile: state=directory
  register: container_build_directory_result
  when: git_repo is defined

- name: set container build directory
  set_fact:
    container_build_directory: "{{ container_build_directory_result.path }}"
  when: git_repo is defined

- block:
  - name: check out image repository | {{ container_name }}
    delegate_to: localhost
    git:
      repo: "{{ git_repo }}"
      dest: "{{ container_build_directory }}"
      version: "{{ git_version | default('HEAD') }}"
    when: git_repo is defined

  - name: container image | {{ container_name }}
    delegate_to: localhost
    docker_image:
      name: "{{ image_name }}"
      tag: "{{ tag }}"
      path: "{{ (container_build_directory + '/' + (build_subdirectory | default('./'))) if git_repo is defined else None}}"
      force: "{{ force | default(False) }}"
      nocache: "{{ nocache | default(False) }}"
      state: "{{ container_state }}"
      buildargs: "{{ buildargs | default({}) }}"
    when: git_repo is defined
    register: container_image_build

  - name: push container image | {{ container_name }}
    connection: local
    shell: >-
      docker tag "{{ image_name }}:{{ tag }}" "{{ docker_registry }}/{{ image_name }}:{{ tag }}" &&
      docker push "{{ docker_registry }}/{{ image_name }}:{{ tag }}"
    when: (git_repo is defined) and (container_image_build | changed)

  always:
    - name: clean up container build directory
      file: path={{ container_build_directory }} state=absent
      when: container_build_directory is defined
