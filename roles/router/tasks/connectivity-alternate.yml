---

- name: configure local interface with alternate IP address
  connection: local
  shell: ip address add {{ alternate_address.client }} dev {{ router_interface }}
  become: True
  become_user: root
  when: router_connectivity_check | failed
  ignore_errors: True
  register: router_connect_ip_configuration

- name: check result of IP configuration
  connection: local
  fail: msg="Could not configure {{ alternate_address.client }} on {{ router_interface }}"
  when: "(router_connect_ip_configuration | failed) and ('File exists' not in router_connect_ip_configuration.stderr)"

- name: check router connectivity via alternate IP address
  connection: local
  wait_for:
    host: "{{ alternate_address.router }}"
    port: 22
    state: started
    connect_timeout: 2
    timeout: 2
  register: router_connectivity_check
  when: router_connectivity_check | failed
  ignore_errors: True

- name: update ansible_host for router
  set_fact:
    ansible_host: "{{ alternate_address.router }}"
  when: router_connectivity_check | success

- name: set connectivity variable
  set_fact:
    router_connectivity_done: True
  when: router_connectivity_check | success
